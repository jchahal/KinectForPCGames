using System;
using System.Runtime.InteropServices;
using KIKSoftwareProject.Keyboard;

namespace KIKSoftwareProject
{
    /// <summary>
    /// Class provides methods to interact windows api's to perform keyboard inputs and mouse inputs
    /// </summary>
    class KeyboardSendInput
    {
        //Windows COM API to send the input to the keyboard
        [DllImport("user32.dll", SetLastError = true)]
        static extern UInt32 SendInput(UInt32 numberOfInputs, INPUT[] inputs, Int32 sizeOfInputStructure);

        //Windows API used to set the active window based on the window handle
        [DllImport("user32.dll")]
        static extern IntPtr SetActiveWindow(IntPtr hWnd);

        [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
        static extern void BlockInput([In, MarshalAs(UnmanagedType.Bool)]bool fBlockIt);

        //Windows API to set keyboard focus to specific window
        [DllImport("user32.dll")]
        static extern void SetFocus(IntPtr hWnd);

        struct INPUT
        {
            /// <summary>
            /// Specifies the type of the input event. This member can be one of the following values. 
            /// InputType.MOUSE - The event is a mouse event. Use the mi structure of the union.
            /// InputType.KEYBOARD - The event is a keyboard event. Use the ki structure of the union.
            /// InputType.HARDWARE - Windows 95/98/Me: The event is from input hardware other than a keyboard or mouse. Use the hi structure of the union.
            /// </summary>
            public UInt32 Type;

            /// <summary>
            /// The data structure that contains information about the simulated Mouse, Keyboard or Hardware event.
            /// </summary>
            public MOUSEKEYBDHARDWAREINPUT Data;
        }

        struct HARDWAREINPUT
        {
            /// <summary>
            /// Value specifying the message generated by the input hardware. 
            /// </summary>
            public UInt32 Msg;

            /// <summary>
            /// Specifies the low-order word of the lParam parameter for uMsg. 
            /// </summary>
            public UInt16 ParamL;

            /// <summary>
            /// Specifies the high-order word of the lParam parameter for uMsg. 
            /// </summary>
            public UInt16 ParamH;
        }       

        struct KEYBDINPUT
        {
            /// <summary>
            /// Specifies a virtual-key code. The code must be a value in the range 1 to 254. The Winuser.h header file provides macro definitions (VK_*) for each value. If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0. 
            /// </summary>
            public UInt16 Vk;

            /// <summary>
            /// Specifies a hardware scan code for the key. If dwFlags specifies KEYEVENTF_UNICODE, wScan specifies a Unicode character which is to be sent to the foreground application. 
            /// </summary>
            public UInt16 Scan;

            /// <summary>
            /// Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            /// KEYEVENTF_EXTENDEDKEY - If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
            /// KEYEVENTF_KEYUP - If specified, the key is being released. If not specified, the key is being pressed.
            /// KEYEVENTF_SCANCODE - If specified, wScan identifies the key and wVk is ignored. 
            /// KEYEVENTF_UNICODE - Windows 2000/XP: If specified, the system synthesizes a VK_PACKET keystroke. The wVk parameter must be zero. This flag can only be combined with the KEYEVENTF_KEYUP flag. For more information, see the Remarks section. 
            /// </summary>
            public UInt32 Flags;

            /// <summary>
            /// Time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp. 
            /// </summary>
            public UInt32 Time;

            /// <summary>
            /// Specifies an additional value associated with the keystroke. Use the GetMessageExtraInfo function to obtain this information. 
            /// </summary>
            public IntPtr ExtraInfo;
        }


        struct MOUSEINPUT
        {
            /// <summary>
            /// Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved. 
            /// </summary>
            public Int32 X;

            /// <summary>
            /// Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved. 
            /// </summary>
            public Int32 Y;

            /// <summary>
            /// If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120. 
            /// Windows Vista: If dwFlags contains MOUSEEVENTF_HWHEEL, then dwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left. One wheel click is defined as WHEEL_DELTA, which is 120.
            /// Windows 2000/XP: IfdwFlags does not contain MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then mouseData should be zero. 
            /// If dwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then mouseData specifies which X buttons were pressed or released. This value may be any combination of the following flags. 
            /// </summary>
            public UInt32 MouseData;

            /// <summary>
            /// A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this member can be any reasonable combination of the following values. 
            /// The bit flags that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released. 
            /// You cannot specify both the MOUSEEVENTF_WHEEL flag and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP flags simultaneously in the dwFlags parameter, because they both require use of the mouseData field. 
            /// </summary>
            public UInt32 Flags;

            /// <summary>
            /// Time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp. 
            /// </summary>
            public UInt32 Time;

            /// <summary>
            /// Specifies an additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information. 
            /// </summary>
            public IntPtr ExtraInfo;
        }


        [StructLayout(LayoutKind.Explicit)]//Ensure that the fields are in the same order as declared in the structure, as CLR is independent to move around the fields      
        struct MOUSEKEYBDHARDWAREINPUT
        {
            [FieldOffset(0)]
            public MOUSEINPUT Mouse;

            [FieldOffset(0)]
            public KEYBDINPUT Keyboard;

            [FieldOffset(0)]
            public HARDWAREINPUT Hardware;

        }

        private const int safetySleepTime = 20;


        /// <summary>
        /// Function called to press the desired key to the specific window
        /// </summary>
        /// <param name="handle">Identifier of the specific window to where keypress need to be sent</param>
        /// <param name="code">The keycode of the specific key</param>
        /// <returns>Returns the code returned from the SendInput(...) API</returns>

        public int PressKey(IntPtr handle, UInt16 code)
        {
            int pressResult = -1;

            //Console.WriteLine("Pressing key: " + code);

            var pressKeyValue = new INPUT();

            //Parameters related to the Input structure provided by windows os
            pressKeyValue.Type = (UInt32)KeyBoardScanCodes.InputType.KeyBoard;
            pressKeyValue.Data.Keyboard = new KEYBDINPUT();

            //Flag value indicating the key press through a scan code and a unicode character set
            pressKeyValue.Data.Keyboard.Flags = (UInt32)KeyBoardScanCodes.FlagsInfo.KEYEVENTF_SCANCODE | (UInt32)KeyBoardScanCodes.FlagsInfo.KEYEVENTF_UNICODE;
            pressKeyValue.Data.Keyboard.Scan = code;
            pressKeyValue.Data.Keyboard.Time = 0;
            pressKeyValue.Data.Keyboard.ExtraInfo = IntPtr.Zero;
            pressKeyValue.Data.Keyboard.Vk = 0;


            INPUT[] inputArrayPress = new INPUT[1];
            inputArrayPress[0] = pressKeyValue;

            //Set the active window to be the game (through its handle) to receive the input
            SetActiveWindow(handle);

            //set the focus of the input to be given to the game
            SetFocus(handle);

            //Sleep to ensure all the actions are performed 
            System.Threading.Thread.Sleep(safetySleepTime);

            //Call SendInput API to send the input to the window in focus
            pressResult = (int)SendInput(1, inputArrayPress, Marshal.SizeOf(typeof(INPUT)));

            if (pressResult == (int)ResultCodes.KeyPressFailed)
            {

                Console.WriteLine("Error Input is Blocked so could not send Press Key");
                return pressResult;

            }

            return pressResult;
        }

        /// <summary>
        /// Releases a key if it is pressed
        /// </summary>
        /// <param name="handle">handle of the window to which input is sent</param>
        /// <param name="code">key code of the key</param>
        /// <returns>result of the releasing the key</returns>
        public int ReleaseKey(IntPtr handle, UInt16 code)
        {
            int pressResult = -1;

            Console.WriteLine("Releasing key: " + code);

            var releaseKeyValue = new INPUT();

            //Parameters related to the Input structure provided by windows os
            releaseKeyValue.Type = (UInt32)KeyBoardScanCodes.InputType.KeyBoard;
            releaseKeyValue.Data.Keyboard = new KEYBDINPUT();

            //Flag value indicating input through scan code, unicode character and key up event
            releaseKeyValue.Data.Keyboard.Flags = (UInt32)KeyBoardScanCodes.FlagsInfo.KEYEVENTF_SCANCODE | (UInt32)KeyBoardScanCodes.FlagsInfo.KEYEVENTF_UNICODE | (UInt32)KeyBoardScanCodes.FlagsInfo.KEYEVENTF_KEYUP;
            releaseKeyValue.Data.Keyboard.Scan = code;
            releaseKeyValue.Data.Keyboard.Time = 0;
            releaseKeyValue.Data.Keyboard.ExtraInfo = IntPtr.Zero;

            INPUT[] inputArrayRelease = new INPUT[1];
            inputArrayRelease[0] = releaseKeyValue;

            //Set the active window to be the game (through its handle) to receive the input
            SetActiveWindow(handle);

            //set the focus of the input to be given to the game
            SetFocus(handle);

            //Sleep to ensure all the actions are performed 
            System.Threading.Thread.Sleep(safetySleepTime);

            //Call SendInput API to send the input to the window in focus
            pressResult = (int)SendInput(1, inputArrayRelease, Marshal.SizeOf(typeof(INPUT)));

            if (pressResult == (int)ResultCodes.KeyPressFailed)
            {

                Console.WriteLine("Error Input is Blocked so could not be sent release key");
                return pressResult;

            }

            return pressResult;
        }

        /// <summary>
        /// Press and release the key
        /// </summary>
        /// <param name="handle">handle of the window where key is supposed to be sent</param>
        /// <param name="code">code of the key to be pressed and released</param>
        /// <returns>result of pressing and releasing</returns>
        public int PressAndReleaseKey(IntPtr handle, UInt16 code)
        {
            int pressResult = -1;

            //Press the key using PressKey function using the handle provided
            pressResult = PressKey(handle, code);

            //Check for the failure of key press
            if (pressResult == (int)ResultCodes.KeyPressFailed)
            {

                Console.WriteLine("Error Input is Blocked so could not send Press Key");
                return pressResult;

            }

            //Release the key using ReleaseKey function using window handle
            pressResult = ReleaseKey(handle, code);

            if (pressResult == (int)ResultCodes.KeyPressFailed)
            {
                Console.WriteLine("Error Input is Blocked so could not be sent release key");
            }

            return pressResult;
        }

        /// <summary>
        /// Mouse click
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="handle"></param>
        /// <returns></returns>
        public int MoveMouse(int x, int y, IntPtr handle)
        {
            int resultCode = (int)ResultCodes.Success;
            do
            {

                var mouseMove = new INPUT();

                mouseMove.Type = (UInt32)KeyBoardScanCodes.InputType.Mouse;
                mouseMove.Data.Mouse = new MOUSEINPUT();

                //mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_ABSOLUTE | (UInt32)MouseScanCodes.MOUSEEVENTF_MOVE;
                mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_MOVE; 
                mouseMove.Data.Mouse.X = x;
                mouseMove.Data.Mouse.Y = y;
                mouseMove.Data.Mouse.Time = 0;
                mouseMove.Data.Mouse.MouseData = 0;

                INPUT[] inputMouse = new INPUT[1];
                inputMouse[0] = mouseMove;

                //Set the active window to be the game (through its handle) to receive the input
                SetActiveWindow(handle);

                //set the focus of the input to be given to the game
                SetFocus(handle);

                //Sleep to ensure all the actions are performed 
                System.Threading.Thread.Sleep(safetySleepTime);

                resultCode = (int)SendInput(1, inputMouse, Marshal.SizeOf(typeof(INPUT)));

                if (resultCode <= 0)
                {
                    resultCode = (int)ResultCodes.MouseInputFailed;
                    break;
                }

            } while (false);

            return (int)ResultCodes.Success;
        }

        public int MouseClick(int clickID, int persistance ,IntPtr handle)
        {
            int clickResult = (int)ResultCodes.Success;
            do
            {

                var mouseMove = new INPUT();

                mouseMove.Type = (UInt32)KeyBoardScanCodes.InputType.Mouse;
                mouseMove.Data.Mouse = new MOUSEINPUT();

                //mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_ABSOLUTE | (UInt32)MouseScanCodes.MOUSEEVENTF_MOVE;
                if (clickID == (int)MouseButton.LEFT_MOUSE_BUTTON && persistance == (int)MousePresistance.PRESS_AND_HOLD)
                {
                    mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_LEFTDOWN;
                }
                else if (clickID == (int)MouseButton.LEFT_MOUSE_BUTTON && persistance == (int)MousePresistance.RELEASE)
                {
                    mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_LEFTUP;
                }
                else if (clickID == (int)MouseButton.RIGHT_MOUSE_BUTTON && persistance == (int)MousePresistance.PRESS_AND_HOLD)
                {
                    mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_RIGHTDOWN;
                }
                else if (clickID == (int)MouseButton.RIGHT_MOUSE_BUTTON && persistance == (int)MousePresistance.RELEASE)
                {
                    mouseMove.Data.Mouse.Flags = (UInt32)MouseScanCodes.MOUSEEVENTF_RIGHTUP;
                }
                else { }

                mouseMove.Data.Mouse.Time = 0;
                mouseMove.Data.Mouse.MouseData = 0;

                INPUT[] inputMouse = new INPUT[1];
                inputMouse[0] = mouseMove;

                //Set the active window to be the game (through its handle) to receive the input
                SetActiveWindow(handle);

                //set the focus of the input to be given to the game
                SetFocus(handle);

                //Sleep to ensure all the actions are performed 
                System.Threading.Thread.Sleep(safetySleepTime);

                clickResult = (int)SendInput(1, inputMouse, Marshal.SizeOf(typeof(INPUT)));

                if (clickResult <= 0)
                {
                    clickResult = (int)ResultCodes.MouseInputFailed;
                    break;
                }

            } while (false);

            return clickResult;
        }

        public int MouseClickAndRelease(int clickID, IntPtr handle)
        {
            int clickResult = -1;

            if (clickID == (int)MouseButton.RIGHT_MOUSE_BUTTON)
            {
                clickResult = MouseClick(clickID, (int)MousePresistance.PRESS_AND_HOLD,handle);

                clickResult = MouseClick(clickID, (int)MousePresistance.RELEASE, handle);
            }

            if (clickID == (int)MouseButton.LEFT_MOUSE_BUTTON)
            {
                clickResult = MouseClick(clickID, (int)MousePresistance.PRESS_AND_HOLD, handle);

                clickResult = MouseClick(clickID, (int)MousePresistance.RELEASE, handle);
            }

            return clickResult;
        }

    }
}